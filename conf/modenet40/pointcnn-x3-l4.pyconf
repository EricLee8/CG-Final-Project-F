{
    "dataset": {
        "name": "ModelNet40-2048",
        "train_load_policy": "normal",
        "test_load_policy": "normal",
        "train_transforms": [
            {"name": "repeat"},
            {"name": "shuffle", "buffer_multiplier": 4, "seed": "@_/seed"},
            {"name": "clip-feature", "c": 3},
            {"name": "scaling", "range": (1.0, 1.1), "seed": "@_/seed"},
            {"name": "rotation", "policy": "euler", "range": [(0.0, 0.0), (0.0, 3.1415926), (0.0, 0.0)], "seed": "@_/seed"},
            "------------",
            {"name": "sampling", "sample_num": 1024, "policy": "random-gauss", "stddev": 128, "range": (1024, 1024), "seed": "@_/seed"}
        ],
        "test_transforms": [
            {"name": "clip-feature", "c": 3},
            "------------",
            {"name": "sampling", "sample_num": 1024, "policy": "random-gauss", "stddev": 128, "range": (1024, 1024), "seed": "@_/seed"}
        ]
    },
    "net": {
        "structure": "sequence",
        "extend_feature": "none",
        "layers": [
            {"name": "conv-xconv", "k": 8, "d": 1, "c": 16 * 3, "cpf": 24, "depth_multiplier": 4, "sampling": "random", "sorting_method": None, "with_global": False, "seed": "@_/seed"},
            {"name": "pooling-xconv", "k": 12, "d": 2, "p": 384, "c": 32 * 3, "cpf": 12, "depth_multiplier": 2, "sampling": "random", "sorting_method": None, "with_global": False, "seed": "@_/seed"},
            {"name": "pooling-xconv", "k": 16, "d": 2, "p": 128, "c": 64 * 3, "cpf": 24, "depth_multiplier": 2, "sampling": "random", "sorting_method": None, "with_global": False, "seed": "@_/seed"},
            {"name": "pooling-xconv", "k": 16, "d": 3, "p": 128, "c": 128 * 3, "cpf": 48, "depth_multiplier": 2, "sampling": "random", "sorting_method": None, "with_global": True, "seed": "@_/seed"},
            {"name": "feature-reshape", "channels": [128 * 3, 64 * 3], "dropout": [0.0, 0.8], "seed": "@_/seed"},
            {"name": "output-segmentation", "output_size": 128, "seed": "@_/seed"}  # Indicate the output is (B, N, @class_count) instead of (B, @class_count)
        ]
    },
    "control": {
        "validation_step": 500,
        "tensorboard_sync_step": 100,
        "train_epoch": 1024,
        "batch_size": 128,
        "learning_rate": {
            "name": "exponential_decay",
            "initial_learning_rate": 0.01,
            "decay_steps": 8000,
            "decay_rate": 0.5,
            "staircase": True
        },
        "optimizer": {
            "name": "adam",
            "epsilon": 1e-2
        }
    },
    "_": {
        "seed": 0
    }
}